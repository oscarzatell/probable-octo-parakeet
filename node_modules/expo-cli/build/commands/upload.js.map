{"version":3,"sources":["../../src/commands/upload.ts"],"names":["COMMON_OPTIONS","program","ANDROID_OPTIONS","androidCommand","command","alias","setCommonOptions","option","description","asyncActionProjectDir","createUploadAction","AndroidUploader","IOS_OPTIONS","iosCommand","on","console","log","LANGUAGES","join","IOSUploader","fileExtension","UploaderClass","optionKeys","projectDir","ensurePlatformIsSupported","ensureOptionsAreValid","options","validateOptions","uploader","upload","err","error","process","platform","exit","args","Error"],"mappings":"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","sourcesContent":["import pick from 'lodash/pick';\nimport size from 'lodash/size';\nimport { Command } from 'commander';\n\nimport IOSUploader, { IosPlatformOptions, LANGUAGES } from './upload/IOSUploader';\nimport AndroidUploader, { AndroidPlatformOptions } from './upload/AndroidUploader';\nimport log from '../log';\n\nconst COMMON_OPTIONS = ['id', 'latest', 'path'];\n\nexport default function(program: Command) {\n  const ANDROID_OPTIONS = [...COMMON_OPTIONS, 'key', 'track'];\n  const androidCommand = program.command('upload:android [projectDir]').alias('ua');\n  setCommonOptions(androidCommand, '.apk');\n  androidCommand\n    .option('--key <key>', 'path to the JSON key used to authenticate with Google Play')\n    .option(\n      '--track <track>',\n      'the track of the application to use, choose from: production, beta, alpha, internal, rollout',\n      /^(production|beta|alpha|internal|rollout)$/i,\n      'internal'\n    )\n    .description(\n      'Uploads a standalone Android app to Google Play (works on macOS only). Uploads the latest build by default.'\n    )\n    .asyncActionProjectDir(createUploadAction(AndroidUploader, ANDROID_OPTIONS));\n\n  const IOS_OPTIONS = [\n    ...COMMON_OPTIONS,\n    'appleId',\n    'appleIdPassword',\n    'appName',\n    'companyName',\n    'sku',\n    'language',\n    'publicUrl',\n  ];\n  const iosCommand = program.command('upload:ios [projectDir]').alias('ui');\n  setCommonOptions(iosCommand, '.ipa');\n  iosCommand\n    .option(\n      '--apple-id <apple-id>',\n      'your Apple ID username (you can also set EXPO_APPLE_ID env variable)'\n    )\n    // apple unified App Store Connect and Developer Portal teams, this is temporary solution until fastlane implements those changes\n    // https://github.com/fastlane/fastlane/issues/14229\n    // after updating fastlane this value will be unnecessary\n    .option(\n      '--itc-team-id <itc-team-id>',\n      'App Store Connect Team ID - this option is deprecated, the proper ID is resolved automatically'\n    )\n    .option(\n      '--apple-id-password <apple-id-password>',\n      'your Apple ID password (you can also set EXPO_APPLE_ID_PASSWORD env variable)'\n    )\n    .option(\n      '--app-name <app-name>',\n      `the name of your app as it will appear on the App Store, this can't be longer than 30 characters (default: expo.name from app.json)`\n    )\n    .option(\n      '--company-name <company-name>',\n      'the name of your company, needed only for the first upload of any app to App Store'\n    )\n    .option(\n      '--sku <sku>',\n      'a unique ID for your app that is not visible on the App Store, will be generated unless provided'\n    )\n    .option(\n      '--language <language>',\n      `primary language (e.g. English, German; run \\`expo upload:ios --help\\` to see the list of available languages)`,\n      'English'\n    )\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .description(\n      'Uploads a standalone app to Apple TestFlight (works on macOS only). Uploads the latest build by default.'\n    )\n    .on('--help', function() {\n      console.log('Available languages:');\n      console.log(`  ${LANGUAGES.join(', ')}`);\n      console.log();\n    })\n    .asyncActionProjectDir(createUploadAction(IOSUploader, IOS_OPTIONS));\n}\n\nfunction setCommonOptions(command: Command, fileExtension: string) {\n  command\n    .option('--latest', 'uploads the latest build (default)')\n    .option('--id <id>', 'id of the build to upload')\n    .option('--path <path>', `path to the ${fileExtension} file`);\n}\n\ntype AnyUploader = any;\n\nfunction createUploadAction(UploaderClass: AnyUploader, optionKeys: string[]) {\n  return async (\n    projectDir: string,\n    command: AndroidPlatformOptions | IosPlatformOptions\n  ): Promise<void> => {\n    try {\n      ensurePlatformIsSupported();\n      ensureOptionsAreValid(command);\n\n      const options = pick(command, optionKeys);\n      if (UploaderClass.validateOptions) {\n        UploaderClass.validateOptions(options);\n      }\n      const uploader = new UploaderClass(projectDir, options);\n      await uploader.upload();\n    } catch (err) {\n      log.error('Failed to upload the standalone app to the app store.');\n      throw err;\n    }\n  };\n}\n\nfunction ensurePlatformIsSupported(): void {\n  if (process.platform !== 'darwin') {\n    log.error('Unsupported platform! This feature works on macOS only.');\n    process.exit(1);\n  }\n}\n\nfunction ensureOptionsAreValid(command: AndroidPlatformOptions | IosPlatformOptions): void {\n  const args = pick(command, COMMON_OPTIONS);\n  if (size(args) > 1) {\n    throw new Error(`You have to choose only one of --path, --id or --latest parameters`);\n  }\n}\n"],"file":"upload.js"}