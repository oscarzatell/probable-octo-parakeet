{"version":3,"sources":["../../../src/commands/build-native/utils.ts"],"names":["waitForBuildEnd","client","buildId","timeoutSec","intervalSec","spinner","start","time","Date","getTime","endTime","buildInfo","getAsync","status","succeed","text","fail","Error","warn","makeProjectTarball","tarPath","changes","stdout","length","printBuildTable","builds","headers","colWidths","refactoredBuilds","map","build","artifacts","buildTable","console","log","getLogsUrl","baseUrl","process","env","EXPO_STAGING","EXPO_LOCAL"],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport { TurtleApi } from '@expo/xdl';\nimport delayAsync from 'delay-async';\nimport get from 'lodash/get';\nimport ora from 'ora';\n\nimport log from '../../log';\nimport { printTableJsonArray } from '../utils/cli-table';\nimport { BuildInfo } from './Builder';\n\nasync function waitForBuildEnd(\n  client: TurtleApi,\n  buildId: string,\n  { timeoutSec = 1800, intervalSec = 30 } = {}\n) {\n  log('Waiting for build to complete. You can press Ctrl+C to exit.');\n  const spinner = ora().start();\n  let time = new Date().getTime();\n  const endTime = time + timeoutSec * 1000;\n  while (time <= endTime) {\n    const buildInfo: BuildInfo = await client.getAsync(`builds/${buildId}`);\n    switch (buildInfo.status) {\n      case 'finished':\n        spinner.succeed('Build finished.');\n        return get(buildInfo, 'artifacts.buildUrl', '');\n      case 'in-queue':\n        spinner.text = 'Build queued...';\n        break;\n      case 'in-progress':\n        spinner.text = 'Build in progress...';\n        break;\n      case 'errored':\n        spinner.fail('Build failed.');\n        throw new Error(`Standalone build failed!`);\n      default:\n        spinner.warn('Unknown status.');\n        throw new Error(`Unknown status: ${buildInfo} - aborting!`);\n    }\n    time = new Date().getTime();\n    await delayAsync(intervalSec * 1000);\n  }\n  spinner.warn('Timed out.');\n  throw new Error(\n    'Timeout reached! It is taking longer than expected to finish the build, aborting...'\n  );\n}\n\nasync function makeProjectTarball(tarPath: string) {\n  const spinner = ora('Making project tarball').start();\n  const changes = (await spawnAsync('git', ['status', '-s'])).stdout;\n  if (changes.length > 0) {\n    spinner.fail('Could not make project tarball');\n    throw new Error('Please commit all files before trying to build your project. Aborting...');\n  }\n  await spawnAsync('git', [\n    'archive',\n    '--format=tar.gz',\n    '--prefix',\n    'project/',\n    '-o',\n    tarPath,\n    'HEAD',\n  ]);\n  spinner.succeed('Project tarball created.');\n}\n\nfunction printBuildTable(builds: BuildInfo[]) {\n  const headers = ['platform', 'status', 'artifacts'];\n  const colWidths = [10, 15, 80];\n  const refactoredBuilds = builds.map(build => ({\n    ...build,\n    artifacts: get(build, 'artifacts.buildUrl', 'not available'),\n  }));\n  const buildTable = printTableJsonArray(headers, refactoredBuilds, colWidths);\n  console.log(buildTable);\n}\n\nfunction getLogsUrl(buildId: string) {\n  let baseUrl;\n  if (process.env.EXPO_STAGING) {\n    baseUrl = `https://staging.turtle.expo.io`;\n  } else if (process.env.EXPO_LOCAL) {\n    baseUrl = `http://localhost:3006`;\n  } else {\n    baseUrl = `https://turtle.expo.io`;\n  }\n\n  return `${baseUrl}/logs/${buildId}`;\n}\n\nexport { waitForBuildEnd, makeProjectTarball, printBuildTable, getLogsUrl };\n"],"file":"utils.js"}