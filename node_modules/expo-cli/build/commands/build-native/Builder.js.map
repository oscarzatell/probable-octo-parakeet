{"version":3,"sources":["../../../src/commands/build-native/Builder.ts"],"names":["Builder","constructor","user","client","TurtleApi","clientForUser","sessionSecret","buildProject","projectDir","options","tarPath","path","join","os","tmpdir","spinner","start","s3Url","uploadFile","succeed","job","platform","buildId","postAsync","fs","remove","getLatestBuilds","getAsync"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAsBe,MAAMA,OAAN,CAAc;AAG3BC,EAAAA,WAAW,CAACC,IAAD,EAAa;AAAA;;AACtB,SAAKC,MAAL,GAAcC,iBAAUC,aAAV,CAAwBH,IAAI,CAACI,aAA7B,CAAd;AACD;;AAED,QAAMC,YAAN,CAAmBC,UAAnB,EAAuCC,OAAvC,EAAyD;AACvD,UAAMC,OAAO,GAAGC,gBAAKC,IAAL,CAAUC,cAAGC,MAAH,EAAV,EAAwB,GAAE,mBAAS,SAAnC,CAAhB;;AACA,QAAI;AACF,YAAM,iCAAmBJ,OAAnB,CAAN;AAEA,YAAMK,OAAO,GAAG,oBAAI,8BAAJ,EAAoCC,KAApC,EAAhB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAY,MAAM,KAAKd,MAAL,CAAYe,UAAZ,CAAuBR,OAAvB,CAAxB;AACAK,MAAAA,OAAO,CAACI,OAAR,CAAgB,mBAAhB;AAEA,YAAMC,GAAG,GAAG,MAAM,8BAAWX,OAAO,CAACY,QAAnB,EAA6BJ,KAA7B,EAAoCT,UAApC,CAAlB;AACA,YAAM;AAAEc,QAAAA;AAAF,UAAc,MAAM,KAAKnB,MAAL,CAAYoB,SAAZ,CAAsB,QAAtB,EAAgCH,GAAhC,CAA1B;AAEA,0BAAK,eAAc,yBAAWE,OAAX,CAAoB,EAAvC;AAEA,aAAO,MAAM,8BAAgB,KAAKnB,MAArB,EAA6BmB,OAA7B,CAAb;AACD,KAbD,SAaU;AACR,YAAME,mBAAGC,MAAH,CAAUf,OAAV,CAAN;AACD;AACF;;AAED,QAAMgB,eAAN,GAA+C;AAC7C,WAAO,MAAM,KAAKvB,MAAL,CAAYwB,QAAZ,CAAqB,QAArB,CAAb;AACD;;AA7B0B","sourcesContent":["import os from 'os';\nimport path from 'path';\n\nimport { Platform, prepareJob } from '@expo/build-tools';\nimport { TurtleApi, User } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport uuidv4 from 'uuid/v4';\n\nimport { getLogsUrl, makeProjectTarball, waitForBuildEnd } from './utils';\nimport log from '../../log';\n\nexport interface StatusResult {\n  builds: BuildInfo[];\n}\n\nexport interface Options {\n  platform: Platform;\n}\n\nexport interface BuildInfo {\n  status: string;\n  platform: Platform;\n  createdAt: string;\n  artifacts?: BuildArtifacts;\n}\n\ninterface BuildArtifacts {\n  buildUrl?: string;\n  logsUrl: string;\n}\n\nexport default class Builder {\n  client: TurtleApi;\n\n  constructor(user: User) {\n    this.client = TurtleApi.clientForUser(user.sessionSecret);\n  }\n\n  async buildProject(projectDir: string, options: Options) {\n    const tarPath = path.join(os.tmpdir(), `${uuidv4()}.tar.gz`);\n    try {\n      await makeProjectTarball(tarPath);\n\n      const spinner = ora('Uploading project to server.').start();\n      const { s3Url } = await this.client.uploadFile(tarPath);\n      spinner.succeed('Project uploaded.');\n\n      const job = await prepareJob(options.platform, s3Url, projectDir);\n      const { buildId } = await this.client.postAsync('builds', job);\n\n      log(`Build logs: ${getLogsUrl(buildId)}`);\n\n      return await waitForBuildEnd(this.client, buildId);\n    } finally {\n      await fs.remove(tarPath);\n    }\n  }\n\n  async getLatestBuilds(): Promise<StatusResult> {\n    return await this.client.getAsync('builds');\n  }\n}\n"],"file":"Builder.js"}