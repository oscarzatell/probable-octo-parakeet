{"version":3,"sources":["../../../src/commands/upload/AndroidUploader.ts"],"names":["PLATFORM","FILE_DOESNT_EXIST_ERROR","path","SERVICE_ACCOUNT_JSON_QUESTION","name","message","type","validate","exists","fs","pathExists","trim","AndroidUploader","BaseUploader","constructor","projectDir","options","_ensureExperienceIsValid","exp","Error","_getPlatformSpecificOptions","key","_getServiceAccountJSONPath","track","_askForServiceAccountJSONPath","answer","_uploadToTheStore","platformData","fastlane","_exp","supplyAndroid","android","package"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,QAAQ,GAAG,SAAjB;;AAEA,MAAMC,uBAAuB,GAAIC,IAAD,IAA2B,QAAOA,IAAK,iBAAvE;;AAEA,MAAMC,6BAAuC,GAAG;AAC9CC,EAAAA,IAAI,EAAE,KADwC;AAE9CC,EAAAA,OAAO,EACL,yFAH4C;AAI9CC,EAAAA,IAAI,EAAE,OAJwC;;AAK9C,QAAMC,QAAN,CAAeL,IAAf,EAAwD;AACtD,UAAMM,MAAM,GAAG,MAAMC,mBAAGC,UAAH,CAAcR,IAAI,CAACS,IAAL,EAAd,CAArB;;AAEA,QAAIH,MAAJ,EAAY;AACV,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAOP,uBAAuB,CAACC,IAAD,CAA9B;AACD;AACF;;AAb6C,CAAhD;;AAqBe,MAAMU,eAAN,SAA8BC,uBAA9B,CAA2C;AACxDC,EAAAA,WAAW,CAACC,UAAD,EAA4BC,OAA5B,EAA6D;AACtE,UAAMhB,QAAN,EAAgBe,UAAhB,EAA4BC,OAA5B;AADsE,SAAjCA,OAAiC,GAAjCA,OAAiC;AAEvE;;AAEDC,EAAAA,wBAAwB,CAACC,GAAD,EAAkB;AACxC,QAAI,CAAC,oBAAIA,GAAJ,EAAS,iBAAT,CAAL,EAAkC;AAChC,YAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACD;AACF;;AAED,QAAMC,2BAAN,GAAqE;AACnE,UAAMC,GAAG,GAAG,MAAM,KAAKC,0BAAL,EAAlB;AACA,WAAO;AAAED,MAAAA,GAAF;AAAOE,MAAAA,KAAK,EAAE,KAAKP,OAAL,CAAaO;AAA3B,KAAP;AACD;;AAED,QAAMD,0BAAN,GAAmC;AACjC,UAAM;AAAED,MAAAA;AAAF,QAAU,KAAKL,OAArB;;AACA,QAAIK,GAAG,KAAK,MAAMZ,mBAAGC,UAAH,CAAcW,GAAd,CAAX,CAAP,EAAuC;AACrC,aAAOA,GAAP;AACD,KAFD,MAEO;AACL,UAAIA,GAAJ,EAAS;AACP,4BAAIpB,uBAAuB,CAACoB,GAAD,CAA3B;AACD;;AACD,aAAO,MAAM,KAAKG,6BAAL,EAAb;AACD;AACF;;AAED,QAAMA,6BAAN,GAAsC;AACpC,UAAMC,MAAM,GAAG,MAAM,uBAAOtB,6BAAP,CAArB;AACA,WAAOsB,MAAM,CAACJ,GAAd;AACD;;AAED,QAAMK,iBAAN,CAAwBC,YAAxB,EAA8DzB,IAA9D,EAA2F;AAAA;;AACzF,UAAM;AAAE0B,MAAAA;AAAF,QAAe,IAArB;AACA,UAAM;AAAEP,MAAAA,GAAF;AAAOE,MAAAA;AAAP,QAAiBI,YAAvB;AACA,QAAI,CAAC,KAAKE,IAAV,EAAgB,MAAM,IAAIV,KAAJ,CAAU,4BAAV,CAAN;AAEhB,UAAM,+BACJS,QAAQ,CAACE,aADL,EAEJ,CAAC5B,IAAD,wBAAO,KAAK2B,IAAL,CAAUE,OAAjB,uDAAO,mBAAmBC,OAA1B,EAAmCX,GAAnC,EAAwCE,KAAxC,CAFI,EAGJ,EAHI,CAAN;AAKD;;AA3CuD","sourcesContent":["import has from 'lodash/has';\nimport fs from 'fs-extra';\n\nimport { ExpoConfig } from '@expo/config';\nimport BaseUploader, { PlatformOptions } from './BaseUploader';\nimport { runFastlaneAsync } from './utils';\nimport prompt, { Question } from '../../prompt';\nimport log from '../../log';\n\nconst PLATFORM = 'android';\n\nconst FILE_DOESNT_EXIST_ERROR = (path: string): string => `File ${path} doesn't exist.`;\n\nconst SERVICE_ACCOUNT_JSON_QUESTION: Question = {\n  name: 'key',\n  message:\n    'The path to the file containing service account JSON, used to authenticate with Google:',\n  type: 'input',\n  async validate(path: string): Promise<boolean | string> {\n    const exists = await fs.pathExists(path.trim());\n\n    if (exists) {\n      return true;\n    } else {\n      return FILE_DOESNT_EXIST_ERROR(path);\n    }\n  },\n};\n\nexport type AndroidPlatformOptions = PlatformOptions & {\n  track: string;\n  key: string;\n};\n\nexport default class AndroidUploader extends BaseUploader {\n  constructor(projectDir: string, public options: AndroidPlatformOptions) {\n    super(PLATFORM, projectDir, options);\n  }\n\n  _ensureExperienceIsValid(exp: ExpoConfig) {\n    if (!has(exp, 'android.package')) {\n      throw new Error('You must specify an Android package in app.json.');\n    }\n  }\n\n  async _getPlatformSpecificOptions(): Promise<AndroidPlatformOptions> {\n    const key = await this._getServiceAccountJSONPath();\n    return { key, track: this.options.track };\n  }\n\n  async _getServiceAccountJSONPath() {\n    const { key } = this.options;\n    if (key && (await fs.pathExists(key))) {\n      return key;\n    } else {\n      if (key) {\n        log(FILE_DOESNT_EXIST_ERROR(key));\n      }\n      return await this._askForServiceAccountJSONPath();\n    }\n  }\n\n  async _askForServiceAccountJSONPath() {\n    const answer = await prompt(SERVICE_ACCOUNT_JSON_QUESTION);\n    return answer.key;\n  }\n\n  async _uploadToTheStore(platformData: AndroidPlatformOptions, path: string): Promise<void> {\n    const { fastlane } = this;\n    const { key, track } = platformData;\n    if (!this._exp) throw new Error('Expo Config is not defined');\n\n    await runFastlaneAsync(\n      fastlane.supplyAndroid,\n      [path, this._exp.android?.package, key, track],\n      {}\n    );\n  }\n}\n"],"file":"AndroidUploader.js"}