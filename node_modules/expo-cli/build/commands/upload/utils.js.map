{"version":3,"sources":["../../../src/commands/upload/utils.ts"],"names":["spawnAsyncThrowError","ExponentTools","downloadFile","url","dest","response","axios","get","responseType","fileSize","Number","headers","bar","ProgressBar","complete","incomplete","total","data","pipe","fs","createWriteStream","Promise","resolve","reject","on","tick","length","runFastlaneAsync","program","args","appleId","appleIdPassword","appleTeamId","itcTeamId","companyName","pipeToLogger","pipeToLoggerOptions","stdout","stdio","fastlaneData","FASTLANE_USER","FASTLANE_PASSWORD","FASTLANE_DONT_STORE_PASSWORD","FASTLANE_TEAM_ID","FASTLANE_ITC_TEAM_ID","PRODUCE_COMPANY_NAME","env","process","spawnOptions","stderr","res","JSON","parse","result","message","reason","rawDump","backtrace","map","i","join","Error"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,oBAAjC;;AAEO,eAAeC,YAAf,CAA4BC,GAA5B,EAAyCC,IAAzC,EAAwE;AAC7E,QAAMC,QAAQ,GAAG,MAAMC,iBAAMC,GAAN,CAAUJ,GAAV,EAAe;AAAEK,IAAAA,YAAY,EAAE;AAAhB,GAAf,CAAvB;AACA,QAAMC,QAAQ,GAAGC,MAAM,CAACL,QAAQ,CAACM,OAAT,CAAiB,gBAAjB,CAAD,CAAvB;AACA,QAAMC,GAAG,GAAG,KAAIC,mBAAJ,EAAgB,mCAAhB,EAAqD;AAC/DC,IAAAA,QAAQ,EAAE,GADqD;AAE/DC,IAAAA,UAAU,EAAE,GAFmD;AAG/DC,IAAAA,KAAK,EAAEP;AAHwD,GAArD,CAAZ;AAKAJ,EAAAA,QAAQ,CAACY,IAAT,CAAcC,IAAd,CAAmBC,mBAAGC,iBAAH,CAAqBhB,IAArB,CAAnB;AACA,SAAO,IAAIiB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAA2B;AAC5ClB,IAAAA,QAAQ,CAACY,IAAT,CAAcO,EAAd,CAAiB,MAAjB,EAA0BP,IAAD,IAA8BL,GAAG,CAACa,IAAJ,CAASR,IAAI,CAACS,MAAd,CAAvD;AACArB,IAAAA,QAAQ,CAACY,IAAT,CAAcO,EAAd,CAAiB,KAAjB,EAAwB,MAAMF,OAAO,CAAClB,IAAD,CAArC;AACAC,IAAAA,QAAQ,CAACY,IAAT,CAAcO,EAAd,CAAiB,OAAjB,EAA0BD,MAA1B;AACD,GAJM,CAAP;AAKD;;AAEM,eAAeI,gBAAf,CACLC,OADK,EAELC,IAFK,EAGL;AACEC,EAAAA,OADF;AAEEC,EAAAA,eAFF;AAGEC,EAAAA,WAHF;AAIEC,EAAAA,SAJF;AAKEC,EAAAA;AALF,CAHK,EAgBLC,YAAY,GAAG,KAhBV,EAiB4B;AACjC,QAAMC,mBAAwB,GAAGD,YAAY,GACzC;AAAEA,IAAAA,YAAY,EAAE;AAAEE,MAAAA,MAAM,EAAE;AAAV;AAAhB,GADyC,GAEzC;AAAEC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,MAAP;AAAT,GAFJ;AAIA,QAAMC,YAAY,GAChBT,OAAO,IAAIC,eAAX,GACI;AACES,IAAAA,aAAa,EAAEV,OADjB;AAEEW,IAAAA,iBAAiB,EAAEV,eAFrB;AAGEW,IAAAA,4BAA4B,EAAE,GAHhC;AAIEC,IAAAA,gBAAgB,EAAEX,WAJpB;AAKE,QAAIC,SAAS,IAAI;AAAEW,MAAAA,oBAAoB,EAAEX;AAAxB,KAAjB,CALF;AAME,QAAIC,WAAW,IAAI;AAAEW,MAAAA,oBAAoB,EAAEX;AAAxB,KAAnB;AANF,GADJ,GASI,EAVN;AAYA,QAAMY,GAAG,GAAG,EACV,GAAGC,OAAO,CAACD,GADD;AAEV,OAAGP;AAFO,GAAZ;AAKA,QAAMS,YAA6C,GAAG,EACpD,GAAGZ,mBADiD;AAEpDU,IAAAA;AAFoD,GAAtD;AAKA,QAAM;AAAEG,IAAAA;AAAF,MAAa,MAAMjD,oBAAoB,CAAC4B,OAAD,EAAUC,IAAV,EAAgBmB,YAAhB,CAA7C;AAEA,QAAME,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAZ;;AACA,MAAIC,GAAG,CAACG,MAAJ,KAAe,SAAnB,EAA8B;AAC5B,WAAOH,GAAP;AACD,GAFD,MAEO;AAAA;;AACL,QAAII,OAAO,GACTJ,GAAG,CAACK,MAAJ,KAAe,gBAAf,GACIL,GAAG,CAACK,MADR,GAEI,oBAAIL,GAAJ,EAAS,iBAAT,EAA4B,qCAA5B,CAHN;AAIAI,IAAAA,OAAO,GAAI,GAAEA,OAAQ,GACnB,CAAAJ,GAAG,SAAH,IAAAA,GAAG,WAAH,4BAAAA,GAAG,CAAEM,OAAL,8DAAcC,SAAd,IACK,KAAIP,GAAG,CAACM,OAAJ,CAAYC,SAAZ,CAAsBC,GAAtB,CAA2BC,CAAD,IAAgB,OAAMA,CAAE,EAAlD,EAAqDC,IAArD,CAA0D,IAA1D,CAAgE,EADzE,GAEI,EACL,EAJD;AAKA,UAAM,IAAIC,KAAJ,CAAUP,OAAV,CAAN;AACD;AACF","sourcesContent":["import { ExponentTools } from '@expo/xdl';\nimport get from 'lodash/get';\nimport fs from 'fs-extra';\nimport ProgressBar from 'progress';\nimport axios from 'axios';\n\nconst { spawnAsyncThrowError } = ExponentTools;\n\nexport async function downloadFile(url: string, dest: string): Promise<string> {\n  const response = await axios.get(url, { responseType: 'stream' });\n  const fileSize = Number(response.headers['content-length']);\n  const bar = new ProgressBar('Downloading [:bar] :percent :etas', {\n    complete: '=',\n    incomplete: ' ',\n    total: fileSize,\n  });\n  response.data.pipe(fs.createWriteStream(dest));\n  return new Promise((resolve, reject): void => {\n    response.data.on('data', (data: { length: number }) => bar.tick(data.length));\n    response.data.on('end', () => resolve(dest));\n    response.data.on('error', reject);\n  });\n}\n\nexport async function runFastlaneAsync(\n  program: string,\n  args: any,\n  {\n    appleId,\n    appleIdPassword,\n    appleTeamId,\n    itcTeamId,\n    companyName,\n  }: {\n    appleId?: string;\n    appleIdPassword?: string;\n    appleTeamId?: string;\n    itcTeamId?: string;\n    companyName?: string;\n  },\n  pipeToLogger = false\n): Promise<{ [key: string]: any }> {\n  const pipeToLoggerOptions: any = pipeToLogger\n    ? { pipeToLogger: { stdout: true } }\n    : { stdio: [0, 1, 'pipe'] };\n\n  const fastlaneData =\n    appleId && appleIdPassword\n      ? {\n          FASTLANE_USER: appleId,\n          FASTLANE_PASSWORD: appleIdPassword,\n          FASTLANE_DONT_STORE_PASSWORD: '1',\n          FASTLANE_TEAM_ID: appleTeamId,\n          ...(itcTeamId && { FASTLANE_ITC_TEAM_ID: itcTeamId }),\n          ...(companyName && { PRODUCE_COMPANY_NAME: companyName }),\n        }\n      : {};\n\n  const env = {\n    ...process.env,\n    ...fastlaneData,\n  };\n\n  const spawnOptions: ExponentTools.AsyncSpawnOptions = {\n    ...pipeToLoggerOptions,\n    env,\n  };\n\n  const { stderr } = await spawnAsyncThrowError(program, args, spawnOptions);\n\n  const res = JSON.parse(stderr);\n  if (res.result !== 'failure') {\n    return res;\n  } else {\n    let message =\n      res.reason !== 'Unknown reason'\n        ? res.reason\n        : get(res, 'rawDump.message', 'Unknown error when running fastlane');\n    message = `${message}${\n      res?.rawDump?.backtrace\n        ? `\\n${res.rawDump.backtrace.map((i: string) => `    ${i}`).join('\\n')}`\n        : ''\n    }`;\n    throw new Error(message);\n  }\n}\n"],"file":"utils.js"}