{"version":3,"sources":["../../../src/commands/build/index.ts"],"names":["program","command","alias","option","description","asyncActionProjectDir","projectDir","options","publicUrl","UrlUtils","isHttps","CommandError","channelRe","RegExp","test","releaseChannel","log","error","process","exit","type","archive","simulator","iosBuilder","IOSBuilder","apk","androidBuilder","AndroidBuilder","Webpack","bundleAsync","dev","builder","BaseBuilder","commandCheckStatus"],"mappings":"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","sourcesContent":["import { UrlUtils, Webpack } from '@expo/xdl';\nimport { Command } from 'commander';\nimport BaseBuilder from './BaseBuilder';\nimport IOSBuilder from './ios/IOSBuilder';\nimport AndroidBuilder from './AndroidBuilder';\nimport log from '../../log';\nimport CommandError from '../../CommandError';\nimport { askBuildType } from './utils';\n\nimport { AndroidOptions, IosOptions } from './BaseBuilder.types';\n\nexport default function(program: Command) {\n  program\n    .command('build:ios [project-dir]')\n    .alias('bi')\n    .option('-c, --clear-credentials', 'Clear all credentials stored on Expo servers.')\n    .option('--clear-dist-cert', 'Remove Distribution Certificate stored on Expo servers.')\n    .option('--clear-push-key', 'Remove Push Notifications Key stored on Expo servers.')\n    .option(\n      '--clear-push-cert',\n      'Remove Push Notifications Certificate stored on Expo servers. Use of Push Notifications Certificates is deprecated.'\n    )\n    .option('--clear-provisioning-profile', 'Remove Provisioning Profile stored on Expo servers.')\n    .option(\n      '-r --revoke-credentials',\n      'Revoke credentials on developer.apple.com, select appropriate using --clear-* options.'\n    )\n    .option(\n      '--apple-id <login>',\n      'Apple ID username (please also set the Apple ID password as EXPO_APPLE_PASSWORD environment variable).'\n    )\n    .option('-t --type <build>', 'Type of build: [archive|simulator].')\n    .option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default')\n    .option('--no-publish', 'Disable automatic publishing before building.')\n    .option('--no-wait', 'Exit immediately after scheduling build.')\n    .option('--team-id <apple-teamId>', 'Apple Team ID.')\n    .option(\n      '--dist-p12-path <dist.p12>',\n      'Path to your Distribution Certificate P12 (set password as EXPO_IOS_DIST_P12_PASSWORD environment variable).'\n    )\n    .option('--push-id <push-id>', 'Push Key ID (ex: 123AB4C56D).')\n    .option('--push-p8-path <push.p8>', 'Path to your Push Key .p8 file.')\n    .option('--provisioning-profile-path <.mobileprovision>', 'Path to your Provisioning Profile.')\n    .option(\n      '--public-url <url>',\n      'The URL of an externally hosted manifest (for self-hosted apps).'\n    )\n    .option('--skip-credentials-check', 'Skip checking credentials.')\n    .description(\n      'Build a standalone IPA for your project, signed and ready for submission to the Apple App Store.'\n    )\n    .asyncActionProjectDir(async (projectDir: string, options: IosOptions) => {\n      if (options.publicUrl && !UrlUtils.isHttps(options.publicUrl)) {\n        throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n      }\n      let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n      if (!channelRe.test(options.releaseChannel)) {\n        log.error(\n          'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n        );\n        process.exit(1);\n      }\n      options.type = await askBuildType(options.type, {\n        archive: 'Deploy the build to the store',\n        simulator: 'Run the build on a simulator',\n      });\n      const iosBuilder = new IOSBuilder(projectDir, options);\n      return iosBuilder.command();\n    });\n\n  program\n    .command('build:android [project-dir]')\n    .alias('ba')\n    .option('-c, --clear-credentials', 'Clear stored credentials.')\n    .option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default')\n    .option('--no-publish', 'Disable automatic publishing before building.')\n    .option('--no-wait', 'Exit immediately after triggering build.')\n    .option('--keystore-path <app.jks>', 'Path to your Keystore.')\n    .option('--keystore-alias <alias>', 'Keystore Alias')\n    .option('--generate-keystore', 'Generate Keystore if one does not exist')\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .option('-t --type <build>', 'Type of build: [app-bundle|apk].')\n    .description(\n      'Build a standalone APK or App Bundle for your project, signed and ready for submission to the Google Play Store.'\n    )\n    .asyncActionProjectDir(async (projectDir: string, options: AndroidOptions) => {\n      if (options.publicUrl && !UrlUtils.isHttps(options.publicUrl)) {\n        throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n      }\n      let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n      if (!channelRe.test(options.releaseChannel)) {\n        log.error(\n          'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n        );\n        process.exit(1);\n      }\n      options.type = await askBuildType(options.type, {\n        apk: 'Build a package to deploy to the store or install directly on Android devices',\n        'app-bundle': 'Build an optimized bundle for the store',\n      });\n      const androidBuilder = new AndroidBuilder(projectDir, options);\n      return androidBuilder.command();\n    });\n\n  program\n    .command('build:web [project-dir]')\n    .option('-c, --clear', 'Clear all cached build files and assets.')\n    .option(\n      '--no-pwa',\n      'Prevent webpack from generating the manifest.json and injecting meta into the index.html head.'\n    )\n    .option('-d, --dev', 'Turns dev flag on before bundling')\n    .description('Build a production bundle for your project, compressed and ready for deployment.')\n    .asyncActionProjectDir(\n      (projectDir: string, options: { pwa: boolean; clear: boolean; dev: boolean }) => {\n        return Webpack.bundleAsync(projectDir, {\n          ...options,\n          dev: typeof options.dev === 'undefined' ? false : options.dev,\n        });\n      },\n      /* skipProjectValidation: */ false,\n      /* skipAuthCheck: */ true\n    );\n\n  program\n    .command('build:status [project-dir]')\n    .alias('bs')\n    .option(\n      '--public-url <url>',\n      'The URL of an externally hosted manifest (for self-hosted apps).'\n    )\n    .description(`Gets the status of a current (or most recently finished) build for your project.`)\n    .asyncActionProjectDir(async (projectDir: string, options: { publicUrl?: string }) => {\n      if (options.publicUrl && !UrlUtils.isHttps(options.publicUrl)) {\n        throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n      }\n      const builder = new BaseBuilder(projectDir, options);\n      return builder.commandCheckStatus();\n    }, /* skipProjectValidation: */ true);\n}\n"],"file":"index.js"}