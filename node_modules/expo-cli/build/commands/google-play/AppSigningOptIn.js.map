{"version":3,"sources":["../../../src/commands/google-play/AppSigningOptIn.ts"],"names":["AppSigningOptInProcess","constructor","projectDir","run","ctx","Context","init","manifest","slug","view","DownloadKeystore","fetch","save","signKeystore","signKeystoreCredentials","keystorePassword","keyAlias","keyPassword","exportPrivateKey","prepareKeystores","user","username","error","log","cleanup","afterStoreSubmit","warn","chalk","underline","confirmQuestion","type","name","message","confirm","confirmEnabled","process","exit","path","join","uploadKeystore","privateSigningKey","publicUploadCert","bold","encryptKeyQuestion","validate","value","length","test","encryptionKey","AndroidCredentials","keystorePath","exp","uploadKeystoreCredentials","generateUploadKeystore","exportCertBase64","logKeystoreCredentials","logKeystoreHashes","red","confirmUpload","default","Error","Credentials","updateCredentialsForPlatform","keystore","fs","readFile","toString","platform","experienceName","all","tryUnlink","file","unlink","err"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEe,MAAMA,sBAAN,CAA6B;AAC1C;AAEA;AAEA;AAEA;AAQAC,EAAAA,WAAW,CAAQC,UAAR,EAA4B;AAAA,SAApBA,UAAoB,GAApBA,UAAoB;;AAAA,0CAbhB,EAagB;;AAAA,4CAXd,EAWc;;AAAA,+CATX,EASW;;AAAA,8CAPZ,EAOY;;AAAA;;AAAA;AAAE;;AAEzC,QAAMC,GAAN,GAA2B;AACzB,UAAMC,GAAG,GAAG,KAAIC,sBAAJ,GAAZ;AACA,UAAMD,GAAG,CAACE,IAAJ,CAAS,KAAKJ,UAAd,CAAN;AACA,8BAAUE,GAAG,CAACG,QAAJ,CAAaC,IAAvB,EAA6B,iCAA7B;AACA,UAAM,KAAKF,IAAL,CAAUF,GAAG,CAACG,QAAJ,CAAaC,IAAvB,CAAN;AAEA,UAAMC,IAAI,GAAG,KAAIC,sCAAJ,EAAqBN,GAAG,CAACG,QAAJ,CAAaC,IAAlC,CAAb;AACA,UAAMC,IAAI,CAACE,KAAL,CAAWP,GAAX,CAAN;AACA,UAAMK,IAAI,CAACG,IAAL,CAAUR,GAAV,EAAe,KAAKS,YAApB,EAAkC,IAAlC,CAAN;AAEA,SAAKC,uBAAL,GAA+B;AAC7BC,MAAAA,gBAAgB,EAAE,oBAAIN,IAAJ,EAAU,8BAAV,CADW;AAE7BO,MAAAA,QAAQ,EAAE,oBAAIP,IAAJ,EAAU,sBAAV,CAFmB;AAG7BQ,MAAAA,WAAW,EAAE,oBAAIR,IAAJ,EAAU,yBAAV;AAHgB,KAA/B;;AAMA,QAAI;AACF,YAAM,KAAKS,gBAAL,EAAN;AACA,YAAM,KAAKC,gBAAL,CAAsBf,GAAG,CAACgB,IAAJ,CAASC,QAA/B,EAAyCjB,GAAG,CAACG,QAA7C,CAAN;AACD,KAHD,CAGE,OAAOe,KAAP,EAAc;AACdC,qBAAID,KAAJ,CAAUA,KAAV;;AACA,YAAM,KAAKE,OAAL,CAAa,IAAb,CAAN;AACA;AACD;;AACD,UAAM,KAAKC,gBAAL,CAAsBrB,GAAG,CAACgB,IAAJ,CAASC,QAA/B,EAAyCjB,GAAG,CAACG,QAA7C,CAAN;AACD;;AAED,QAAMD,IAAN,CAAWE,IAAX,EAAwC;AACtCe,mBAAIG,IAAJ,CACE,kIADF;;AAGA,wBACG,qEAAoEC,iBAAMC,SAAN,CACnE,sCADmE,CAEnE,0OAHJ;AAKA,UAAMC,eAA2B,GAAG,CAClC;AACEC,MAAAA,IAAI,EAAE,SADR;AAEEC,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,OAAO,EAAE;AAHX,KADkC,CAApC;AAOA,UAAM;AAAEC,MAAAA,OAAO,EAAEC;AAAX,QAA8B,MAAM,uBAAOL,eAAP,CAA1C;;AACA,QAAIK,cAAJ,EAAoB;AAClB,0BAAI,0EAAJ;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AAED,SAAKvB,YAAL,GAAoBwB,gBAAKC,IAAL,CAAU,KAAKpC,UAAf,EAA4B,GAAEM,IAAK,eAAnC,CAApB;AACA,SAAK+B,cAAL,GAAsBF,gBAAKC,IAAL,CAAU,KAAKpC,UAAf,EAA4B,GAAEM,IAAK,iBAAnC,CAAtB;AACA,SAAKgC,iBAAL,GAAyBH,gBAAKC,IAAL,CAAU,KAAKpC,UAAf,EAA4B,GAAEM,IAAK,mBAAnC,CAAzB;AACA,SAAKiC,gBAAL,GAAwBJ,gBAAKC,IAAL,CAAU,KAAKpC,UAAf,EAA4B,GAAEM,IAAK,kBAAnC,CAAxB;AACA,UAAM,KAAKgB,OAAL,CAAa,IAAb,CAAN;AACD;;AAED,QAAMN,gBAAN,GAAyB;AACvB,wBACG,mEAAkES,iBAAMe,IAAN,CACjE,qDADiE,CAEjE,yDAHJ;AAKA,UAAMC,kBAA8B,GAAG,CACrC;AACEb,MAAAA,IAAI,EAAE,OADR;AAEEC,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,OAAO,EAAE,4BAHX;AAIEY,MAAAA,QAAQ,EAAGC,KAAD,IACPA,KAAK,CAACC,MAAN,KAAiB,GAAjB,IAAwB,iBAAiBC,IAAjB,CAAsBF,KAAtB,CAAzB,IACA;AANJ,KADqC,CAAvC;AAUA,UAAM;AAAEG,MAAAA;AAAF,QAAoB,MAAM,uBAAOL,kBAAP,CAAhC;AAEA,UAAMM,0BAAmB/B,gBAAnB,CACJ;AACEgC,MAAAA,YAAY,EAAE,KAAKrC,YADrB;AAEE,SAAG,KAAKC;AAFV,KADI,EAKJkC,aALI,EAMJ,KAAKR,iBAND,CAAN;AAQD;;AAED,QAAMrB,gBAAN,CAAuBE,QAAvB,EAAyC8B,GAAzC,EAAyE;AACvE,wBAAK,6BAA4B,KAAKZ,cAAe,KAArD;AACA,SAAKa,yBAAL,GAAiC,MAAMH,0BAAmBI,sBAAnB,CACrC,KAAKd,cADgC,EAErC,oBAAIY,GAAJ,EAAS,iBAAT,CAFqC,EAGpC,IAAG9B,QAAS,IAAG8B,GAAG,CAAC3C,IAAK,EAHY,CAAvC;AAMA,wBAAK,gCAA+B,KAAKiC,gBAAiB,EAA1D;AACA,UAAMQ,0BAAmBK,gBAAnB,CACJ;AACEJ,MAAAA,YAAY,EAAE,KAAKX,cADrB;AAEExB,MAAAA,gBAAgB,EAAE,KAAKqC,yBAAL,CAA+BrC,gBAFnD;AAGEC,MAAAA,QAAQ,EAAE,KAAKoC,yBAAL,CAA+BpC;AAH3C,KADI,EAMJ,KAAKyB,gBAND,CAAN;AASA,UAAMQ,0BAAmBM,sBAAnB,CACJ,KAAKH,yBADD,EAEJ,iCAFI,CAAN;AAKA,wBAAI,yBAAJ;AACA,UAAMH,0BAAmBO,iBAAnB,CAAqC;AACzCN,MAAAA,YAAY,EAAE,KAAKrC,YADsB;AAEzC,SAAG,KAAKC;AAFiC,KAArC,CAAN;AAIA,wBAAI,oBAAJ;AACA,UAAMmC,0BAAmBO,iBAAnB,CAAqC;AACzCN,MAAAA,YAAY,EAAE,KAAKX,cADsB;AAEzC,SAAG,KAAKa;AAFiC,KAArC,CAAN;AAID;;AAED,QAAM3B,gBAAN,CAAuBJ,QAAvB,EAAyC8B,GAAzC,EAAyE;AACvE5B,mBAAIG,IAAJ,CACG,6DAA4DC,iBAAMC,SAAN,CAC3D,KAAKY,iBADsD,CAE3D,QAAOb,iBAAMe,IAAN,CAAW,yBAAX,CAAsC,SAAQf,iBAAMC,SAAN,CACrD,KAAKa,gBADgD,CAErD,QAAOd,iBAAMe,IAAN,CAAW,+BAAX,CAA4C,GALvD;;AAQAnB,mBAAIG,IAAJ,CACG,sBAAqBC,iBAAM8B,GAAN,CACpB,gDADoB,CAEpB,oIAHJ;;AAKA,UAAM;AAAExB,MAAAA,OAAO,EAAEyB;AAAX,QAA6B,MAAM,uBAAO,CAC9C;AACE5B,MAAAA,IAAI,EAAE,SADR;AAEEC,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,OAAO,EAAE,oDAHX;AAIE2B,MAAAA,OAAO,EAAE;AAJX,KAD8C,CAAP,CAAzC;;AAQA,QAAI,CAACD,aAAL,EAAoB;AAClB,YAAM,KAAKlC,OAAL,CAAa,IAAb,CAAN;;AACAD,qBAAID,KAAJ,CAAU,mCAAV;;AACAa,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AAED,QAAI,CAAC,KAAKgB,yBAAV,EAAqC;AACnC,YAAM,IAAIQ,KAAJ,CACJ,oFADI,CAAN;AAGD;;AAED,UAAMC,mBAAYC,4BAAZ,CACJ,SADI,EAEJ;AACE;AACA/C,MAAAA,gBAAgB,EAAE,KAAKqC,yBAAL,CAA+BrC,gBAFnD;AAGEC,MAAAA,QAAQ,EAAE,KAAKoC,yBAAL,CAA+BpC,QAH3C;AAIEC,MAAAA,WAAW,EAAE,KAAKmC,yBAAL,CAA+BnC,WAJ9C;AAKE8C,MAAAA,QAAQ,EAAE,CAAC,MAAMC,mBAAGC,QAAH,CAAY,KAAK1B,cAAjB,CAAP,EAAyC2B,QAAzC,CAAkD,QAAlD;AALZ,KAFI,EASJ,EATI,EAUJ;AACEC,MAAAA,QAAQ,EAAE,SADZ;AAEE9C,MAAAA,QAFF;AAGE+C,MAAAA,cAAc,EAAG,IAAG/C,QAAS,IAAG8B,GAAG,CAAC3C,IAAK;AAH3C,KAVI,CAAN;AAiBA,wBACG,sCAAqC,KAAKK,YAAa,wFAD1D;;AAGA,QAAI,CAAC,KAAKC,uBAAV,EAAmC;AACjC,YAAM,IAAI8C,KAAJ,CACJ,+EADI,CAAN;AAGD;;AACDX,8BAAmBM,sBAAnB,CACE,KAAKzC,uBADP,EAEE,mCAFF;;AAKA,UAAM,KAAKU,OAAL,EAAN;AACD;;AAED,QAAcA,OAAd,CAAsB6C,GAAY,GAAG,KAArC,EAA2D;AACzDC,IAAAA,SAAS,CAAC,KAAK/B,cAAN,CAAT;AACA+B,IAAAA,SAAS,CAAC,KAAK7B,gBAAN,CAAT;AACA6B,IAAAA,SAAS,CAAC,KAAK9B,iBAAN,CAAT;;AACA,QAAI6B,GAAJ,EAAS;AACPC,MAAAA,SAAS,CAAC,KAAKzD,YAAN,CAAT;AACD;AACF;;AAlNyC;;;;AAqN5C,eAAeyD,SAAf,CAAyBC,IAAzB,EAAsD;AACpD,MAAI;AACF,UAAMP,mBAAGQ,MAAH,CAAUD,IAAV,CAAN;AACD,GAFD,CAEE,OAAOE,GAAP,EAAY,CAAE;AACjB","sourcesContent":["import path from 'path';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport get from 'lodash/get';\n\nimport { AndroidCredentials, Credentials } from '@expo/xdl';\nimport { ExpoConfig } from '@expo/config';\nimport invariant from 'invariant';\nimport { Context } from '../../credentials';\nimport { DownloadKeystore } from '../../credentials/views/AndroidCredentials';\n\nimport log from '../../log';\nimport prompt, { Question } from '../../prompt';\n\nexport default class AppSigningOptInProcess {\n  // Keystore used to sign production app\n  signKeystore: string = '';\n  // Keystore used to sign app before uploading to Google Play store\n  uploadKeystore: string = '';\n  // private signing key and public cert extracted from signKeystore and encrypted using Google Play encryption key.\n  privateSigningKey: string = '';\n  // public cert extracted from upload keystore\n  publicUploadCert: string = '';\n\n  uploadKeystoreCredentials: AndroidCredentials.KeystoreInfo | undefined;\n  signKeystoreCredentials:\n    | Pick<AndroidCredentials.Keystore, 'keystorePassword' | 'keyAlias' | 'keyPassword'>\n    | undefined;\n\n  constructor(public projectDir: string) {}\n\n  async run(): Promise<void> {\n    const ctx = new Context();\n    await ctx.init(this.projectDir);\n    invariant(ctx.manifest.slug, 'app.json slug field must be set');\n    await this.init(ctx.manifest.slug as string);\n\n    const view = new DownloadKeystore(ctx.manifest.slug as string);\n    await view.fetch(ctx);\n    await view.save(ctx, this.signKeystore, true);\n\n    this.signKeystoreCredentials = {\n      keystorePassword: get(view, 'credentials.keystorePassword'),\n      keyAlias: get(view, 'credentials.keyAlias'),\n      keyPassword: get(view, 'credentials.keyPassword'),\n    };\n\n    try {\n      await this.exportPrivateKey();\n      await this.prepareKeystores(ctx.user.username, ctx.manifest);\n    } catch (error) {\n      log.error(error);\n      await this.cleanup(true);\n      return;\n    }\n    await this.afterStoreSubmit(ctx.user.username, ctx.manifest);\n  }\n\n  async init(slug: string): Promise<void> {\n    log.warn(\n      'Make sure you are not using Google Play App Signing already as this process will remove your current keystore from Expo servers.'\n    );\n    log(\n      `You can check whether you are using Google Play App Signing here: ${chalk.underline(\n        'https://play.google.com/apps/publish'\n      )}. Select your app and go to \"Release management\" â†’ \"App signing\" tab. If you are already using Google Play App Signing, there will be a message that says, \"App Signing by Google Play is enabled for this app\", at the top of the page.`\n    );\n    const confirmQuestion: Question[] = [\n      {\n        type: 'confirm',\n        name: 'confirm',\n        message: 'Is Google Play App Signing enabled for this app?',\n      },\n    ];\n    const { confirm: confirmEnabled } = await prompt(confirmQuestion);\n    if (confirmEnabled) {\n      log('Google Play App Signing is already enabled; there is nothing to do here.');\n      process.exit(0);\n    }\n\n    this.signKeystore = path.join(this.projectDir, `${slug}_sign.jks.bak`);\n    this.uploadKeystore = path.join(this.projectDir, `${slug}_upload.jks.tmp`);\n    this.privateSigningKey = path.join(this.projectDir, `${slug}_private_sign_key`);\n    this.publicUploadCert = path.join(this.projectDir, `${slug}_upload_cert.pem`);\n    await this.cleanup(true);\n  }\n\n  async exportPrivateKey() {\n    log(\n      `Go to the \"App signing\" tab in the Google Play console, select \"${chalk.bold(\n        'Export and upload a key (not using a Java keystore)'\n      )}\" and copy the encryption key that is listed in step 1.`\n    );\n    const encryptKeyQuestion: Question[] = [\n      {\n        type: 'input',\n        name: 'encryptionKey',\n        message: 'Google Play encryption key',\n        validate: (value: string) =>\n          (value.length === 136 && /^[A-Fa-f0-9]+$/.test(value)) ||\n          'Encryption key needs to be a hex-encoded 68-byte string (a 4-byte identity followed by a 64-byte P-256 point).',\n      },\n    ];\n    const { encryptionKey } = await prompt(encryptKeyQuestion);\n\n    await AndroidCredentials.exportPrivateKey(\n      {\n        keystorePath: this.signKeystore,\n        ...this.signKeystoreCredentials,\n      } as AndroidCredentials.KeystoreInfo,\n      encryptionKey,\n      this.privateSigningKey\n    );\n  }\n\n  async prepareKeystores(username: string, exp: ExpoConfig): Promise<void> {\n    log(`Saving upload keystore to ${this.uploadKeystore}...`);\n    this.uploadKeystoreCredentials = await AndroidCredentials.generateUploadKeystore(\n      this.uploadKeystore,\n      get(exp, 'android.package'),\n      `@${username}/${exp.slug}`\n    );\n\n    log(`Saving upload certificate to ${this.publicUploadCert}`);\n    await AndroidCredentials.exportCertBase64(\n      {\n        keystorePath: this.uploadKeystore,\n        keystorePassword: this.uploadKeystoreCredentials.keystorePassword,\n        keyAlias: this.uploadKeystoreCredentials.keyAlias,\n      },\n      this.publicUploadCert\n    );\n\n    await AndroidCredentials.logKeystoreCredentials(\n      this.uploadKeystoreCredentials,\n      'Credentials for upload keystore'\n    );\n\n    log('App signing certificate');\n    await AndroidCredentials.logKeystoreHashes({\n      keystorePath: this.signKeystore,\n      ...this.signKeystoreCredentials,\n    } as AndroidCredentials.KeystoreInfo);\n    log('Upload certificate');\n    await AndroidCredentials.logKeystoreHashes({\n      keystorePath: this.uploadKeystore,\n      ...this.uploadKeystoreCredentials,\n    });\n  }\n\n  async afterStoreSubmit(username: string, exp: ExpoConfig): Promise<void> {\n    log.warn(\n      `On the previously opened Google Play console page, upload ${chalk.underline(\n        this.privateSigningKey\n      )} as \"${chalk.bold('APP SIGNING PRIVATE KEY')}\" and ${chalk.underline(\n        this.publicUploadCert\n      )} as \"${chalk.bold('UPLOAD KEY PUBLIC CERTIFICATE')}\"`\n    );\n\n    log.warn(\n      `The next step will ${chalk.red(\n        'remove your current keystore from Expo servers'\n      )}. Make sure that private key is uploaded successfully and compare the hashes displayed above with the ones printed in the console.`\n    );\n    const { confirm: confirmUpload } = await prompt([\n      {\n        type: 'confirm',\n        name: 'confirm',\n        message: 'Is App Signing by Google Play enabled succesfully?',\n        default: false,\n      },\n    ]);\n    if (!confirmUpload) {\n      await this.cleanup(true);\n      log.error('Aborting, no changes were applied');\n      process.exit(1);\n    }\n\n    if (!this.uploadKeystoreCredentials) {\n      throw new Error(\n        'Android uploading keystore credentials are not defined. Cannot update credentials.'\n      );\n    }\n\n    await Credentials.updateCredentialsForPlatform(\n      'android',\n      {\n        // @ts-ignore\n        keystorePassword: this.uploadKeystoreCredentials.keystorePassword,\n        keyAlias: this.uploadKeystoreCredentials.keyAlias,\n        keyPassword: this.uploadKeystoreCredentials.keyPassword,\n        keystore: (await fs.readFile(this.uploadKeystore)).toString('base64'),\n      },\n      [],\n      {\n        platform: 'android',\n        username,\n        experienceName: `@${username}/${exp.slug}`,\n      }\n    );\n\n    log(\n      `The original keystore is stored in ${this.signKeystore}; remove it only if you are sure that Google Play App Signing is enabled for your app.`\n    );\n    if (!this.signKeystoreCredentials) {\n      throw new Error(\n        'Android signing keystore credentials are not defined. Cannot log credentials.'\n      );\n    }\n    AndroidCredentials.logKeystoreCredentials(\n      this.signKeystoreCredentials,\n      'Credentials for original keystore'\n    );\n\n    await this.cleanup();\n  }\n\n  private async cleanup(all: boolean = false): Promise<void> {\n    tryUnlink(this.uploadKeystore);\n    tryUnlink(this.publicUploadCert);\n    tryUnlink(this.privateSigningKey);\n    if (all) {\n      tryUnlink(this.signKeystore);\n    }\n  }\n}\n\nasync function tryUnlink(file: string): Promise<void> {\n  try {\n    await fs.unlink(file);\n  } catch (err) {}\n}\n"],"file":"AppSigningOptIn.js"}