{"version":3,"sources":["../../../src/commands/utils/ProjectUtils.ts"],"names":["findProjectRootAsync","base","previous","dir","pkgPath","path","join","appJsonPath","pkgExists","fs","existsSync","appJsonExists","pkg","JsonFile","readAsync","expo","getAsync","workflow","dependencies","hasOwnProperty","projectRoot","dirname","CommandError","validateGitStatusAsync","workingTreeStatus","result","stdout","e","log","nested","chalk","green","bold","red"],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport spawnAsync from '@expo/spawn-async';\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\n\nimport CommandError from '../../CommandError';\nimport log from '../../log';\n\nexport async function findProjectRootAsync(\n  base: string\n): Promise<{ projectRoot: string; workflow: 'managed' | 'bare' }> {\n  let previous = null;\n  let dir = base;\n\n  do {\n    let pkgPath = path.join(dir, 'package.json');\n    let appJsonPath = path.join(dir, 'app.json');\n    let pkgExists = fs.existsSync(pkgPath);\n    let appJsonExists = fs.existsSync(appJsonPath);\n\n    if (pkgExists && appJsonExists) {\n      let pkg = await JsonFile.readAsync(pkgPath);\n      let expo = await JsonFile.getAsync(path.join(dir, 'app.json'), 'expo', null);\n\n      let workflow: 'managed' | 'bare';\n      if (expo && pkg.dependencies && pkg.dependencies.hasOwnProperty('react-native-unimodules')) {\n        workflow = 'bare';\n      } else if (!expo) {\n        workflow = 'bare';\n      } else {\n        workflow = 'managed';\n      }\n\n      return { projectRoot: dir, workflow };\n    } else if (pkgExists && !appJsonExists) {\n      return { projectRoot: dir, workflow: 'bare' };\n    }\n\n    previous = dir;\n    dir = path.dirname(dir);\n  } while (dir !== previous);\n\n  throw new CommandError(\n    'NO_PROJECT',\n    'No managed or bare projects found. Please make sure you are inside a project folder.'\n  );\n}\n\nexport async function validateGitStatusAsync(): Promise<boolean> {\n  let workingTreeStatus = 'unknown';\n  try {\n    let result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch (e) {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'clean') {\n    log.nested(`Your git working tree is ${chalk.green('clean')}`);\n    log.nested('To revert the changes after this command completes, you can run the following:');\n    log.nested('  git clean --force && git reset --hard');\n    return true;\n  } else if (workingTreeStatus === 'dirty') {\n    log.nested(`${chalk.bold('Warning!')} Your git working tree is ${chalk.red('dirty')}.`);\n    log.nested(\n      `It's recommended to ${chalk.bold(\n        'commit all your changes before proceeding'\n      )}, so you can revert the changes made by this command if necessary.`\n    );\n  } else {\n    log.nested(\"We couldn't find a git repository in your project directory.\");\n    log.nested(\"It's recommended to back up your project before proceeding.\");\n  }\n\n  return false;\n}\n"],"file":"ProjectUtils.js"}