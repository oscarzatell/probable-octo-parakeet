{"version":3,"sources":["../src/exp.ts"],"names":["packageJSON","require","Api","setClientName","version","ApiV2","Command","prototype","urlOpts","addOptions","allowOffline","option","program","on","asyncAction","asyncFn","skipUpdateCheck","action","args","checkCliVersionAsync","e","options","output","log","config","raw","offline","Config","Analytics","flush","err","isCommandError","error","message","_isApiError","chalk","red","isXDLError","gray","stack","process","exit","asyncActionProjectDir","skipProjectValidation","skipAuthCheck","projectDir","opts","cwd","path","resolve","pathToConfig","fs","existsSync","Error","ConfigUtils","setCustomConfigPath","logLines","msg","logFn","line","split","logStackTrace","chunk","nestedLogFn","traceInfo","JSON","parse","addNewLineIfNone","bold","isLibraryFrame","startsWith","stackFrames","lastAppCodeFrameIndex","lastFrameIndexToLog","Math","min","length","unloggedFrames","i","match","printNewLineBeforeNextLog","logWithLevel","level","bunyan","INFO","includesStack","nested","WARN","warn","nestedWarn","nestedError","bar","PackagerLogsStream","projectRoot","onStartBuildBundle","ProgressBar","total","clear","complete","incomplete","setBundleProgressBar","onProgressBuildBundle","percent","ticks","curr","tick","onFinishBuildBundle","startTime","endTime","terminate","green","getTime","updateLogs","updater","newLogChunks","forEach","newLogChunk","issueId","issueCleared","ProjectUtils","attachLoggerStream","stream","write","tag","type","Project","currentStatus","spinner","start","setSpinner","status","Doctor","validateWithoutNetworkAsync","FATAL","stop","runAsync","programName","setSegmentNodeKey","setVersionName","_registerLogs","UserManager","setInteractiveAuthenticationCallback","loginOrRegisterIfLoggedOut","env","SERVER_URL","serverUrl","parsedUrl","url","port","parseInt","hostname","api","host","developerTool","name","subCommand","nonInteractive","stdin","isTTY","argv","help","console","updateIsAvailable","current","latest","deprecated","update","checkForUpdateAsync","borderColor","padding","code","NotificationCode","START_LOADING","simpleSpinner","STOP_LOADING","DOWNLOAD_CLI_PROGRESS","ERROR","Logger","notifications","addStream","global","writePathAsync","Binaries","writePathToUserSettingsAsync","generateCommandJSON","commands","map","commandAsJSON","optionAsJSON","flags","required","description","default","defaultValue","command","alias","sanitizeFlags","replace","formatOptionAsMarkdown","formatOptionsAsMarkdown","join","formatCommandAsMarkdown","formatCommandsAsMarkdown","run","includes","stringify","Promise","all","catch"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport url from 'url';\n\nimport ProgressBar from 'progress';\nimport last from 'lodash/last';\nimport compact from 'lodash/compact';\nimport findLastIndex from 'lodash/findLastIndex';\nimport boxen from 'boxen';\nimport bunyan from '@expo/bunyan';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport simpleSpinner from '@expo/simple-spinner';\nimport program, { Command, Option } from 'commander';\nimport {\n  Analytics,\n  Api,\n  ApiV2,\n  Binaries,\n  Config,\n  Doctor,\n  LogRecord,\n  LogUpdater,\n  Logger,\n  NotificationCode,\n  PackagerLogsStream,\n  Project,\n  ProjectUtils,\n  UserManager,\n} from '@expo/xdl';\nimport * as ConfigUtils from '@expo/config';\n\nimport { loginOrRegisterIfLoggedOut } from './accounts';\nimport log from './log';\nimport update from './update';\nimport urlOpts from './urlOpts';\nimport { registerCommands } from './commands';\n\n// We use require() to exclude package.json from TypeScript's analysis since it lives outside the\n// src directory and would change the directory structure of the emitted files under the build\n// directory\nconst packageJSON = require('../package.json');\n\nApi.setClientName(packageJSON.version);\nApiV2.setClientName(packageJSON.version);\n\n// The following prototyped functions are not used here, but within in each file found in `./commands`\n// Extending commander to easily add more options to certain command line arguments\nCommand.prototype.urlOpts = function() {\n  urlOpts.addOptions(this);\n  return this;\n};\n\nCommand.prototype.allowOffline = function() {\n  this.option('--offline', 'Allows this command to run while offline');\n  return this;\n};\n\nprogram.on('--help', () => {\n  log(`To learn more about a specific command and its options use 'expo [command] --help'\\n`);\n});\n\nexport type Action = (...args: any[]) => void;\n\n// asyncAction is a wrapper for all commands/actions to be executed after commander is done\n// parsing the command input\nCommand.prototype.asyncAction = function(asyncFn: Action, skipUpdateCheck: boolean) {\n  return this.action(async (...args: any[]) => {\n    if (!skipUpdateCheck) {\n      try {\n        await checkCliVersionAsync();\n      } catch (e) {}\n    }\n\n    try {\n      let options = last(args);\n      if (options.output === 'raw') {\n        log.config.raw = true;\n      }\n      if (options.offline) {\n        Config.offline = true;\n      }\n\n      await asyncFn(...args);\n      // After a command, flush the analytics queue so the program will not have any active timers\n      // This allows node js to exit immediately\n      Analytics.flush();\n    } catch (err) {\n      // TODO: Find better ways to consolidate error messages\n      if (err.isCommandError) {\n        log.error(err.message);\n      } else if (err._isApiError) {\n        log.error(chalk.red(err.message));\n      } else if (err.isXDLError) {\n        log.error(err.message);\n      } else {\n        log.error(err.message);\n        log.error(chalk.gray(err.stack));\n      }\n\n      process.exit(1);\n    }\n  });\n};\n\n// asyncActionProjectDir captures the projectDirectory from the command line,\n// setting it to cwd if it is not provided.\n// Commands such as `start` and `publish` use this.\n// It does several things:\n// - Everything in asyncAction\n// - Checks if the user is logged in or out\n// - Checks for updates\n// - Attaches the bundling logger\n// - Checks if the project directory is valid or not\n// - Runs AsyncAction with the projectDir as an argument\nCommand.prototype.asyncActionProjectDir = function(\n  asyncFn: Action,\n  skipProjectValidation: boolean,\n  skipAuthCheck: boolean\n) {\n  this.option('--config [file]', 'Specify a path to app.json');\n  return this.asyncAction(async (projectDir: string, ...args: any[]) => {\n    const opts = args[0];\n\n    if (!projectDir) {\n      projectDir = process.cwd();\n    } else {\n      projectDir = path.resolve(process.cwd(), projectDir);\n    }\n\n    if (opts.config) {\n      const pathToConfig = path.resolve(process.cwd(), opts.config);\n      if (!fs.existsSync(pathToConfig)) {\n        throw new Error(`File at provided config path does not exist: ${pathToConfig}`);\n      }\n      ConfigUtils.setCustomConfigPath(projectDir, pathToConfig);\n    }\n\n    const logLines = (msg: any, logFn: (...args: any[]) => void) => {\n      if (typeof msg === 'string') {\n        for (let line of msg.split('\\n')) {\n          logFn(line);\n        }\n      } else {\n        logFn(msg);\n      }\n    };\n\n    const logStackTrace = (\n      chunk: LogRecord,\n      logFn: (...args: any[]) => void,\n      nestedLogFn: (...args: any[]) => void\n    ) => {\n      let traceInfo;\n      try {\n        traceInfo = JSON.parse(chunk.msg);\n      } catch (e) {\n        return logFn(chunk.msg);\n      }\n\n      let { message, stack } = traceInfo;\n      log.addNewLineIfNone();\n      logFn(chalk.bold(message));\n\n      const isLibraryFrame = (line: string) => {\n        return line.startsWith('node_modules');\n      };\n\n      const stackFrames: string[] = compact(stack.split('\\n'));\n      let lastAppCodeFrameIndex = findLastIndex(stackFrames, (line: string) => {\n        return !isLibraryFrame(line);\n      });\n      let lastFrameIndexToLog = Math.min(\n        stackFrames.length - 1,\n        lastAppCodeFrameIndex + 2 // show max two more frames after last app code frame\n      );\n      let unloggedFrames = stackFrames.length - lastFrameIndexToLog;\n\n      // If we're only going to exclude one frame, just log them all\n      if (unloggedFrames === 1) {\n        lastFrameIndexToLog = stackFrames.length - 1;\n        unloggedFrames = 0;\n      }\n\n      for (let i = 0; i <= lastFrameIndexToLog; i++) {\n        let line = stackFrames[i];\n        if (!line) {\n          continue;\n        } else if (line.match(/react-native\\/.*YellowBox.js/)) {\n          continue;\n        }\n\n        if (line.startsWith('node_modules')) {\n          nestedLogFn('- ' + line);\n        } else {\n          nestedLogFn('* ' + line);\n        }\n      }\n\n      if (unloggedFrames > 0) {\n        nestedLogFn(`- ... ${unloggedFrames} more stack frames from framework internals`);\n      }\n\n      log.printNewLineBeforeNextLog();\n    };\n\n    const logWithLevel = (chunk: LogRecord) => {\n      if (!chunk.msg) {\n        return;\n      }\n      if (chunk.level <= bunyan.INFO) {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log, log.nested);\n        } else {\n          logLines(chunk.msg, log);\n        }\n      } else if (chunk.level === bunyan.WARN) {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log.warn, log.nestedWarn);\n        } else {\n          logLines(chunk.msg, log.warn);\n        }\n      } else {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log.error, log.nestedError);\n        } else {\n          logLines(chunk.msg, log.error);\n        }\n      }\n    };\n\n    let bar: ProgressBar | null;\n    // eslint-disable-next-line no-new\n    new PackagerLogsStream({\n      projectRoot: projectDir,\n      onStartBuildBundle: () => {\n        bar = new ProgressBar('Building JavaScript bundle [:bar] :percent', {\n          total: 100,\n          clear: true,\n          complete: '=',\n          incomplete: ' ',\n        });\n\n        log.setBundleProgressBar(bar);\n      },\n      onProgressBuildBundle: (percent: number) => {\n        if (!bar || bar.complete) return;\n        let ticks = percent - bar.curr;\n        ticks > 0 && bar.tick(ticks);\n      },\n      onFinishBuildBundle: (err, startTime, endTime) => {\n        if (bar && !bar.complete) {\n          bar.tick(100 - bar.curr);\n        }\n\n        if (bar) {\n          log.setBundleProgressBar(null);\n          bar.terminate();\n          bar = null;\n\n          if (err) {\n            log(chalk.red('Failed building JavaScript bundle.'));\n          } else {\n            log(\n              chalk.green(\n                `Finished building JavaScript bundle in ${endTime.getTime() -\n                  startTime.getTime()}ms.`\n              )\n            );\n          }\n        }\n      },\n      updateLogs: (updater: LogUpdater) => {\n        let newLogChunks = updater([]);\n        newLogChunks.forEach((newLogChunk: LogRecord) => {\n          if (newLogChunk.issueId && newLogChunk.issueCleared) {\n            return;\n          }\n          logWithLevel(newLogChunk);\n        });\n      },\n    });\n\n    // needed for validation logging to function\n    ProjectUtils.attachLoggerStream(projectDir, {\n      stream: {\n        write: (chunk: LogRecord) => {\n          if (chunk.tag === 'device') {\n            logWithLevel(chunk);\n          }\n        },\n      },\n      type: 'raw',\n    });\n\n    // The existing CLI modules only pass one argument to this function, so skipProjectValidation\n    // will be undefined in most cases. we can explicitly pass a truthy value here to avoid\n    // validation (eg for init)\n    //\n    // If the packager/manifest server is running and healthy, there is no need\n    // to rerun Doctor because the directory was already checked previously\n    // This is relevant for command such as `send`\n    if (!skipProjectValidation && (await Project.currentStatus(projectDir)) !== 'running') {\n      let spinner = ora('Making sure project is set up correctly...').start();\n      log.setSpinner(spinner);\n      // validate that this is a good projectDir before we try anything else\n\n      let status = await Doctor.validateWithoutNetworkAsync(projectDir);\n      if (status === Doctor.FATAL) {\n        throw new Error(`There is an error with your project. See above logs for information.`);\n      }\n      spinner.stop();\n      log.setSpinner(null);\n    }\n\n    // the existing CLI modules only pass one argument to this function, so skipProjectValidation\n    // will be undefined in most cases. we can explicitly pass a truthy value here to avoid validation (eg for init)\n\n    return asyncFn(projectDir, ...args);\n  });\n};\n\nfunction runAsync(programName: string) {\n  try {\n    // Setup analytics\n    Analytics.setSegmentNodeKey('vGu92cdmVaggGA26s3lBX6Y5fILm8SQ7');\n    Analytics.setVersionName(packageJSON.version);\n    _registerLogs();\n\n    UserManager.setInteractiveAuthenticationCallback(loginOrRegisterIfLoggedOut);\n\n    if (process.env.SERVER_URL) {\n      let serverUrl = process.env.SERVER_URL;\n      if (!serverUrl.startsWith('http')) {\n        serverUrl = `http://${serverUrl}`;\n      }\n      let parsedUrl = url.parse(serverUrl);\n      const port = parseInt(parsedUrl.port || '', 10);\n      if (parsedUrl.hostname && port) {\n        Config.api.host = parsedUrl.hostname;\n        Config.api.port = port;\n      } else {\n        throw new Error('Environment variable SERVER_URL is not a valid url');\n      }\n    }\n\n    Config.developerTool = packageJSON.name;\n\n    // Setup our commander instance\n    program.name(programName);\n    program\n      .version(packageJSON.version)\n      .option(\n        '--non-interactive',\n        'Fail, if an interactive prompt would be required to continue. Enabled by default if stdin is not a TTY.'\n      );\n\n    // Load each module found in ./commands by 'registering' it with our commander instance\n    registerCommands(program);\n\n    program.on('command:detach', () => {\n      log.warn('To eject your project to ExpoKit (previously \"detach\"), use `expo eject`.');\n      process.exit(0);\n    });\n\n    program.on('command:*', subCommand => {\n      log.warn(\n        `\"${subCommand}\" is not an ${programName} command. See \"${programName} --help\" for the full list of commands.`\n      );\n    });\n\n    if (typeof program.nonInteractive === 'undefined') {\n      // Commander doesn't initialize boolean args with default values.\n      program.nonInteractive = !process.stdin.isTTY;\n    }\n\n    program.parse(process.argv);\n\n    // Show help when no sub-command specified\n    if (program.args.length === 0) {\n      program.help();\n    }\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n}\n\nasync function checkCliVersionAsync() {\n  let { updateIsAvailable, current, latest, deprecated } = await update.checkForUpdateAsync();\n  if (updateIsAvailable) {\n    log.nestedWarn(\n      boxen(\n        chalk.green(`There is a new version of ${packageJSON.name} available (${latest}).\nYou are currently using ${packageJSON.name} ${current}\nInstall expo-cli globally using the package manager of your choice;\nfor example: \\`npm install -g ${packageJSON.name}\\` to get the latest version`),\n        { borderColor: 'green', padding: 1 }\n      )\n    );\n  }\n\n  if (deprecated) {\n    log.nestedWarn(\n      boxen(\n        chalk.red(\n          `This version of expo-cli is not supported anymore.\nIt's highly recommended to update to the newest version.\n\nThe API endpoints used in this version of expo-cli might not exist,\nany interaction with Expo servers may result in unexpected behaviour.`\n        ),\n        { borderColor: 'red', padding: 1 }\n      )\n    );\n  }\n}\n\nfunction _registerLogs() {\n  let stream = {\n    stream: {\n      write: (chunk: any) => {\n        if (chunk.code) {\n          switch (chunk.code) {\n            case NotificationCode.START_LOADING:\n              simpleSpinner.start();\n              return;\n            case NotificationCode.STOP_LOADING:\n              simpleSpinner.stop();\n              return;\n            case NotificationCode.DOWNLOAD_CLI_PROGRESS:\n              return;\n          }\n        }\n\n        if (chunk.level === bunyan.INFO) {\n          log(chunk.msg);\n        } else if (chunk.level === bunyan.WARN) {\n          log.warn(chunk.msg);\n        } else if (chunk.level >= bunyan.ERROR) {\n          log.error(chunk.msg);\n        }\n      },\n    },\n    type: 'raw',\n  };\n\n  Logger.notifications.addStream(stream);\n  Logger.global.addStream(stream);\n}\n\nasync function writePathAsync() {\n  let subCommand = process.argv[2];\n  if (subCommand === 'prepare-detached-build') {\n    // This is being run from Android Studio or Xcode. Don't want to write PATH in this case.\n    return;\n  }\n\n  await Binaries.writePathToUserSettingsAsync();\n}\n\ntype OptionData = {\n  flags: string;\n  required: boolean;\n  description: string;\n  default: any;\n};\n\ntype CommandData = {\n  name: string;\n  description: string;\n  alias?: string;\n  options: OptionData[];\n};\n\n// Sets up commander with a minimal setup for inspecting commands and extracting\n// data from them.\nfunction generateCommandJSON() {\n  program.name('expo');\n  registerCommands(program);\n  return program.commands.map(commandAsJSON);\n}\n\n// The type definition for Option seems to be wrong - doesn't include defaultValue\nfunction optionAsJSON(option: Option & { defaultValue: any }): OptionData {\n  return {\n    flags: option.flags,\n    required: option.required,\n    description: option.description,\n    default: option.defaultValue,\n  };\n}\n\nfunction commandAsJSON(command: Command): CommandData {\n  return {\n    name: command.name(),\n    description: command.description(),\n    alias: command.alias(),\n    options: command.options.map(optionAsJSON),\n  };\n}\n\nfunction sanitizeFlags(flags: string) {\n  return flags.replace('<', '[').replace('>', ']');\n}\n\nfunction formatOptionAsMarkdown(option: OptionData) {\n  return `| \\`${sanitizeFlags(option.flags)}\\` | ${option.description} |`;\n}\n\nfunction formatOptionsAsMarkdown(options: OptionData[]) {\n  if (!options || !options.length) {\n    return 'This command does not take any options.';\n  }\n\n  return `| Option         | Description             |\n| ------------ | ----------------------- |\n${options.map(formatOptionAsMarkdown).join('\\n')}\n`;\n}\n\nfunction formatCommandAsMarkdown(command: CommandData) {\n  return `\n<details><summary><h3>expo ${command.name}</h3><p>${command.description}</p></summary>\n<p>${\n    command.alias\n      ? `\n\nAlias: \\`expo ${command.alias}\\``\n      : ''\n  }\n\n${formatOptionsAsMarkdown(command.options)}\n\n</p>\n</details>\n  `;\n}\n\nfunction formatCommandsAsMarkdown(commands: CommandData[]) {\n  return commands.map(formatCommandAsMarkdown).join('\\n');\n}\n\n// This is the entry point of the CLI\nexport function run(programName: string) {\n  (async function() {\n    if (process.argv[2] == 'introspect') {\n      let commands = generateCommandJSON();\n      if (process.argv[3] && process.argv[3].includes('markdown')) {\n        log(formatCommandsAsMarkdown(commands));\n      } else {\n        log(JSON.stringify(commands));\n      }\n    } else {\n      await Promise.all([writePathAsync(), runAsync(programName)]);\n    }\n  })().catch(e => {\n    console.error('Uncaught Error', e);\n    process.exit(1);\n  });\n}\n"],"file":"exp.js"}